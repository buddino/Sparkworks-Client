/*
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: 1.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ResourceDTO;
import io.swagger.client.model.ResourceListDTO;
import io.swagger.client.model.ResourcePropertyListDTO;
import io.swagger.client.model.ResourceTagListDTO;
import org.junit.Test;

/**
 * API tests for ResourceapicontrollerApi
 */
public class ResourceapicontrollerApiTest {

    private final ResourceapicontrollerApi api = new ResourceapicontrollerApi();

    
    /**
     * addResourceProperty
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addResourcePropertyUsingPOSTTest() throws ApiException {
        Long resourceId = null;
        ResourcePropertyListDTO resourcePropertyListDTO = null;
        // ResourcePropertyListDTO response = api.addResourcePropertyUsingPOST(resourceId, resourcePropertyListDTO);

        // TODO: test validations
    }
    
    /**
     * addResource
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addResourceUsingPOSTTest() throws ApiException {
        ResourceDTO resourceDTO = null;
        // ResourceListDTO response = api.addResourceUsingPOST(resourceDTO);

        // TODO: test validations
    }
    
    /**
     * addSiteResources
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSiteResourcesUsingPOSTTest() throws ApiException {
        Long siteId = null;
        ResourceListDTO resourceListDTO = null;
        // ResourceListDTO response = api.addSiteResourcesUsingPOST(siteId, resourceListDTO);

        // TODO: test validations
    }
    
    /**
     * addTag
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTagUsingPOSTTest() throws ApiException {
        Long resourceId = null;
        ResourceTagListDTO resourceTagListDTO = null;
        // ResourceTagListDTO response = api.addTagUsingPOST(resourceId, resourceTagListDTO);

        // TODO: test validations
    }
    
    /**
     * deleteSiteResources
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSiteResourcesUsingPOSTTest() throws ApiException {
        Long siteId = null;
        ResourceListDTO resourceListDTO = null;
        // ResourceListDTO response = api.deleteSiteResourcesUsingPOST(siteId, resourceListDTO);

        // TODO: test validations
    }
    
    /**
     * getTags
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagsUsingGETTest() throws ApiException {
        Long resourceId = null;
        // ResourceTagListDTO response = api.getTagsUsingGET(resourceId);

        // TODO: test validations
    }
    
    /**
     * get
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsingGET1Test() throws ApiException {
        Long id = null;
        // ResourceDTO response = api.getUsingGET1(id);

        // TODO: test validations
    }
    
    /**
     * listResourceProperties
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listResourcePropertiesUsingGETTest() throws ApiException {
        Long resourceId = null;
        // ResourcePropertyListDTO response = api.listResourcePropertiesUsingGET(resourceId);

        // TODO: test validations
    }
    
    /**
     * listSiteResources
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSiteResourcesUsingGETTest() throws ApiException {
        Long siteId = null;
        // ResourceListDTO response = api.listSiteResourcesUsingGET(siteId);

        // TODO: test validations
    }
    
    /**
     * list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUsingGET1Test() throws ApiException {
        String uri = null;
        String tag = null;
        Boolean favorites = null;
        String resourceType = null;
        // ResourceListDTO response = api.listUsingGET1(uri, tag, favorites, resourceType);

        // TODO: test validations
    }
    
    /**
     * removeResourceProperty
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeResourcePropertyUsingPOSTTest() throws ApiException {
        Long resourceId = null;
        ResourcePropertyListDTO resourcePropertyListDTO = null;
        // ResourcePropertyListDTO response = api.removeResourcePropertyUsingPOST(resourceId, resourcePropertyListDTO);

        // TODO: test validations
    }
    
    /**
     * removeTag
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTagUsingPOSTTest() throws ApiException {
        Long resourceId = null;
        ResourceTagListDTO resourceTagListDTO = null;
        // ResourceTagListDTO response = api.removeTagUsingPOST(resourceId, resourceTagListDTO);

        // TODO: test validations
    }
    
}
