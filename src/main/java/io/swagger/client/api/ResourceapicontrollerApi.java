/*
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: 1.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import com.google.gson.reflect.TypeToken;
import io.swagger.client.*;
import io.swagger.client.model.ResourceDTO;
import io.swagger.client.model.ResourceListDTO;
import io.swagger.client.model.ResourcePropertyListDTO;
import io.swagger.client.model.ResourceTagListDTO;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourceapicontrollerApi {
    private ApiClient apiClient;

    public ResourceapicontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourceapicontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addResourcePropertyUsingPOST */
    private com.squareup.okhttp.Call addResourcePropertyUsingPOSTCall(Long resourceId, ResourcePropertyListDTO resourcePropertyListDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resourcePropertyListDTO;
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling addResourcePropertyUsingPOST(Async)");
        }
        
        // verify the required parameter 'resourcePropertyListDTO' is set
        if (resourcePropertyListDTO == null) {
            throw new ApiException("Missing the required parameter 'resourcePropertyListDTO' when calling addResourcePropertyUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/{resourceId}/property/add".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * addResourceProperty
     * 
     * @param resourceId resourceId (required)
     * @param resourcePropertyListDTO resourcePropertyListDTO (required)
     * @return ResourcePropertyListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourcePropertyListDTO addResourcePropertyUsingPOST(Long resourceId, ResourcePropertyListDTO resourcePropertyListDTO) throws ApiException {
        ApiResponse<ResourcePropertyListDTO> resp = addResourcePropertyUsingPOSTWithHttpInfo(resourceId, resourcePropertyListDTO);
        return resp.getData();
    }

    /**
     * addResourceProperty
     * 
     * @param resourceId resourceId (required)
     * @param resourcePropertyListDTO resourcePropertyListDTO (required)
     * @return ApiResponse&lt;ResourcePropertyListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourcePropertyListDTO> addResourcePropertyUsingPOSTWithHttpInfo(Long resourceId, ResourcePropertyListDTO resourcePropertyListDTO) throws ApiException {
        com.squareup.okhttp.Call call = addResourcePropertyUsingPOSTCall(resourceId, resourcePropertyListDTO, null, null);
        Type localVarReturnType = new TypeToken<ResourcePropertyListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addResourceProperty (asynchronously)
     * 
     * @param resourceId resourceId (required)
     * @param resourcePropertyListDTO resourcePropertyListDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addResourcePropertyUsingPOSTAsync(Long resourceId, ResourcePropertyListDTO resourcePropertyListDTO, final ApiCallback<ResourcePropertyListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addResourcePropertyUsingPOSTCall(resourceId, resourcePropertyListDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourcePropertyListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addResourceUsingPOST */
    private com.squareup.okhttp.Call addResourceUsingPOSTCall(ResourceDTO resourceDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resourceDTO;
        
        // verify the required parameter 'resourceDTO' is set
        if (resourceDTO == null) {
            throw new ApiException("Missing the required parameter 'resourceDTO' when calling addResourceUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * addResource
     * 
     * @param resourceDTO resourceDTO (required)
     * @return ResourceListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceListDTO addResourceUsingPOST(ResourceDTO resourceDTO) throws ApiException {
        ApiResponse<ResourceListDTO> resp = addResourceUsingPOSTWithHttpInfo(resourceDTO);
        return resp.getData();
    }

    /**
     * addResource
     * 
     * @param resourceDTO resourceDTO (required)
     * @return ApiResponse&lt;ResourceListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceListDTO> addResourceUsingPOSTWithHttpInfo(ResourceDTO resourceDTO) throws ApiException {
        com.squareup.okhttp.Call call = addResourceUsingPOSTCall(resourceDTO, null, null);
        Type localVarReturnType = new TypeToken<ResourceListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addResource (asynchronously)
     * 
     * @param resourceDTO resourceDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addResourceUsingPOSTAsync(ResourceDTO resourceDTO, final ApiCallback<ResourceListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addResourceUsingPOSTCall(resourceDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addSiteResourcesUsingPOST */
    private com.squareup.okhttp.Call addSiteResourcesUsingPOSTCall(Long siteId, ResourceListDTO resourceListDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resourceListDTO;
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling addSiteResourcesUsingPOST(Async)");
        }
        
        // verify the required parameter 'resourceListDTO' is set
        if (resourceListDTO == null) {
            throw new ApiException("Missing the required parameter 'resourceListDTO' when calling addSiteResourcesUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/location/site/{siteId}/resource/add".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * addSiteResources
     * 
     * @param siteId siteId (required)
     * @param resourceListDTO resourceListDTO (required)
     * @return ResourceListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceListDTO addSiteResourcesUsingPOST(Long siteId, ResourceListDTO resourceListDTO) throws ApiException {
        ApiResponse<ResourceListDTO> resp = addSiteResourcesUsingPOSTWithHttpInfo(siteId, resourceListDTO);
        return resp.getData();
    }

    /**
     * addSiteResources
     * 
     * @param siteId siteId (required)
     * @param resourceListDTO resourceListDTO (required)
     * @return ApiResponse&lt;ResourceListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceListDTO> addSiteResourcesUsingPOSTWithHttpInfo(Long siteId, ResourceListDTO resourceListDTO) throws ApiException {
        com.squareup.okhttp.Call call = addSiteResourcesUsingPOSTCall(siteId, resourceListDTO, null, null);
        Type localVarReturnType = new TypeToken<ResourceListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addSiteResources (asynchronously)
     * 
     * @param siteId siteId (required)
     * @param resourceListDTO resourceListDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSiteResourcesUsingPOSTAsync(Long siteId, ResourceListDTO resourceListDTO, final ApiCallback<ResourceListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSiteResourcesUsingPOSTCall(siteId, resourceListDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addTagUsingPOST */
    private com.squareup.okhttp.Call addTagUsingPOSTCall(Long resourceId, ResourceTagListDTO resourceTagListDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resourceTagListDTO;
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling addTagUsingPOST(Async)");
        }
        
        // verify the required parameter 'resourceTagListDTO' is set
        if (resourceTagListDTO == null) {
            throw new ApiException("Missing the required parameter 'resourceTagListDTO' when calling addTagUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/{resourceId}/tag/add".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * addTag
     * 
     * @param resourceId resourceId (required)
     * @param resourceTagListDTO resourceTagListDTO (required)
     * @return ResourceTagListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceTagListDTO addTagUsingPOST(Long resourceId, ResourceTagListDTO resourceTagListDTO) throws ApiException {
        ApiResponse<ResourceTagListDTO> resp = addTagUsingPOSTWithHttpInfo(resourceId, resourceTagListDTO);
        return resp.getData();
    }

    /**
     * addTag
     * 
     * @param resourceId resourceId (required)
     * @param resourceTagListDTO resourceTagListDTO (required)
     * @return ApiResponse&lt;ResourceTagListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceTagListDTO> addTagUsingPOSTWithHttpInfo(Long resourceId, ResourceTagListDTO resourceTagListDTO) throws ApiException {
        com.squareup.okhttp.Call call = addTagUsingPOSTCall(resourceId, resourceTagListDTO, null, null);
        Type localVarReturnType = new TypeToken<ResourceTagListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addTag (asynchronously)
     * 
     * @param resourceId resourceId (required)
     * @param resourceTagListDTO resourceTagListDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTagUsingPOSTAsync(Long resourceId, ResourceTagListDTO resourceTagListDTO, final ApiCallback<ResourceTagListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTagUsingPOSTCall(resourceId, resourceTagListDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceTagListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteSiteResourcesUsingPOST */
    private com.squareup.okhttp.Call deleteSiteResourcesUsingPOSTCall(Long siteId, ResourceListDTO resourceListDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resourceListDTO;
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling deleteSiteResourcesUsingPOST(Async)");
        }
        
        // verify the required parameter 'resourceListDTO' is set
        if (resourceListDTO == null) {
            throw new ApiException("Missing the required parameter 'resourceListDTO' when calling deleteSiteResourcesUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/location/site/{siteId}/resource/remove".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * deleteSiteResources
     * 
     * @param siteId siteId (required)
     * @param resourceListDTO resourceListDTO (required)
     * @return ResourceListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceListDTO deleteSiteResourcesUsingPOST(Long siteId, ResourceListDTO resourceListDTO) throws ApiException {
        ApiResponse<ResourceListDTO> resp = deleteSiteResourcesUsingPOSTWithHttpInfo(siteId, resourceListDTO);
        return resp.getData();
    }

    /**
     * deleteSiteResources
     * 
     * @param siteId siteId (required)
     * @param resourceListDTO resourceListDTO (required)
     * @return ApiResponse&lt;ResourceListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceListDTO> deleteSiteResourcesUsingPOSTWithHttpInfo(Long siteId, ResourceListDTO resourceListDTO) throws ApiException {
        com.squareup.okhttp.Call call = deleteSiteResourcesUsingPOSTCall(siteId, resourceListDTO, null, null);
        Type localVarReturnType = new TypeToken<ResourceListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteSiteResources (asynchronously)
     * 
     * @param siteId siteId (required)
     * @param resourceListDTO resourceListDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSiteResourcesUsingPOSTAsync(Long siteId, ResourceListDTO resourceListDTO, final ApiCallback<ResourceListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSiteResourcesUsingPOSTCall(siteId, resourceListDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTagsUsingGET */
    private com.squareup.okhttp.Call getTagsUsingGETCall(Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getTagsUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/{resourceId}/tag".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getTags
     * 
     * @param resourceId resourceId (required)
     * @return ResourceTagListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceTagListDTO getTagsUsingGET(Long resourceId) throws ApiException {
        ApiResponse<ResourceTagListDTO> resp = getTagsUsingGETWithHttpInfo(resourceId);
        return resp.getData();
    }

    /**
     * getTags
     * 
     * @param resourceId resourceId (required)
     * @return ApiResponse&lt;ResourceTagListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceTagListDTO> getTagsUsingGETWithHttpInfo(Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = getTagsUsingGETCall(resourceId, null, null);
        Type localVarReturnType = new TypeToken<ResourceTagListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getTags (asynchronously)
     * 
     * @param resourceId resourceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagsUsingGETAsync(Long resourceId, final ApiCallback<ResourceTagListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagsUsingGETCall(resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceTagListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsingGET1 */
    private com.squareup.okhttp.Call getUsingGET1Call(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUsingGET1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get
     * 
     * @param id id (required)
     * @return ResourceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceDTO getUsingGET1(Long id) throws ApiException {
        ApiResponse<ResourceDTO> resp = getUsingGET1WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * get
     * 
     * @param id id (required)
     * @return ApiResponse&lt;ResourceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceDTO> getUsingGET1WithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getUsingGET1Call(id, null, null);
        Type localVarReturnType = new TypeToken<ResourceDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get (asynchronously)
     * 
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsingGET1Async(Long id, final ApiCallback<ResourceDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsingGET1Call(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listResourcePropertiesUsingGET */
    private com.squareup.okhttp.Call listResourcePropertiesUsingGETCall(Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling listResourcePropertiesUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/{resourceId}/property".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * listResourceProperties
     * 
     * @param resourceId resourceId (required)
     * @return ResourcePropertyListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourcePropertyListDTO listResourcePropertiesUsingGET(Long resourceId) throws ApiException {
        ApiResponse<ResourcePropertyListDTO> resp = listResourcePropertiesUsingGETWithHttpInfo(resourceId);
        return resp.getData();
    }

    /**
     * listResourceProperties
     * 
     * @param resourceId resourceId (required)
     * @return ApiResponse&lt;ResourcePropertyListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourcePropertyListDTO> listResourcePropertiesUsingGETWithHttpInfo(Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = listResourcePropertiesUsingGETCall(resourceId, null, null);
        Type localVarReturnType = new TypeToken<ResourcePropertyListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listResourceProperties (asynchronously)
     * 
     * @param resourceId resourceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listResourcePropertiesUsingGETAsync(Long resourceId, final ApiCallback<ResourcePropertyListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listResourcePropertiesUsingGETCall(resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourcePropertyListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listSiteResourcesUsingGET */
    private com.squareup.okhttp.Call listSiteResourcesUsingGETCall(Long siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling listSiteResourcesUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/location/site/{siteId}/resource".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * listSiteResources
     * 
     * @param siteId siteId (required)
     * @return ResourceListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceListDTO listSiteResourcesUsingGET(Long siteId) throws ApiException {
        ApiResponse<ResourceListDTO> resp = listSiteResourcesUsingGETWithHttpInfo(siteId);
        return resp.getData();
    }

    /**
     * listSiteResources
     * 
     * @param siteId siteId (required)
     * @return ApiResponse&lt;ResourceListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceListDTO> listSiteResourcesUsingGETWithHttpInfo(Long siteId) throws ApiException {
        com.squareup.okhttp.Call call = listSiteResourcesUsingGETCall(siteId, null, null);
        Type localVarReturnType = new TypeToken<ResourceListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listSiteResources (asynchronously)
     * 
     * @param siteId siteId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSiteResourcesUsingGETAsync(Long siteId, final ApiCallback<ResourceListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSiteResourcesUsingGETCall(siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listUsingGET1 */
    private com.squareup.okhttp.Call listUsingGET1Call(String uri, String tag, Boolean favorites, String resourceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/resource".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (uri != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "uri", uri));
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tag", tag));
        if (favorites != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "favorites", favorites));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resourceType", resourceType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * list
     * 
     * @param uri uri (optional)
     * @param tag tag (optional)
     * @param favorites favorites (optional, default to false)
     * @param resourceType resourceType (optional)
     * @return ResourceListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceListDTO listUsingGET1(String uri, String tag, Boolean favorites, String resourceType) throws ApiException {
        ApiResponse<ResourceListDTO> resp = listUsingGET1WithHttpInfo(uri, tag, favorites, resourceType);
        return resp.getData();
    }

    /**
     * list
     * 
     * @param uri uri (optional)
     * @param tag tag (optional)
     * @param favorites favorites (optional, default to false)
     * @param resourceType resourceType (optional)
     * @return ApiResponse&lt;ResourceListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceListDTO> listUsingGET1WithHttpInfo(String uri, String tag, Boolean favorites, String resourceType) throws ApiException {
        com.squareup.okhttp.Call call = listUsingGET1Call(uri, tag, favorites, resourceType, null, null);
        Type localVarReturnType = new TypeToken<ResourceListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * list (asynchronously)
     * 
     * @param uri uri (optional)
     * @param tag tag (optional)
     * @param favorites favorites (optional, default to false)
     * @param resourceType resourceType (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listUsingGET1Async(String uri, String tag, Boolean favorites, String resourceType, final ApiCallback<ResourceListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listUsingGET1Call(uri, tag, favorites, resourceType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeResourcePropertyUsingPOST */
    private com.squareup.okhttp.Call removeResourcePropertyUsingPOSTCall(Long resourceId, ResourcePropertyListDTO resourcePropertyListDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resourcePropertyListDTO;
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling removeResourcePropertyUsingPOST(Async)");
        }
        
        // verify the required parameter 'resourcePropertyListDTO' is set
        if (resourcePropertyListDTO == null) {
            throw new ApiException("Missing the required parameter 'resourcePropertyListDTO' when calling removeResourcePropertyUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/{resourceId}/property/remove".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * removeResourceProperty
     * 
     * @param resourceId resourceId (required)
     * @param resourcePropertyListDTO resourcePropertyListDTO (required)
     * @return ResourcePropertyListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourcePropertyListDTO removeResourcePropertyUsingPOST(Long resourceId, ResourcePropertyListDTO resourcePropertyListDTO) throws ApiException {
        ApiResponse<ResourcePropertyListDTO> resp = removeResourcePropertyUsingPOSTWithHttpInfo(resourceId, resourcePropertyListDTO);
        return resp.getData();
    }

    /**
     * removeResourceProperty
     * 
     * @param resourceId resourceId (required)
     * @param resourcePropertyListDTO resourcePropertyListDTO (required)
     * @return ApiResponse&lt;ResourcePropertyListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourcePropertyListDTO> removeResourcePropertyUsingPOSTWithHttpInfo(Long resourceId, ResourcePropertyListDTO resourcePropertyListDTO) throws ApiException {
        com.squareup.okhttp.Call call = removeResourcePropertyUsingPOSTCall(resourceId, resourcePropertyListDTO, null, null);
        Type localVarReturnType = new TypeToken<ResourcePropertyListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * removeResourceProperty (asynchronously)
     * 
     * @param resourceId resourceId (required)
     * @param resourcePropertyListDTO resourcePropertyListDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeResourcePropertyUsingPOSTAsync(Long resourceId, ResourcePropertyListDTO resourcePropertyListDTO, final ApiCallback<ResourcePropertyListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeResourcePropertyUsingPOSTCall(resourceId, resourcePropertyListDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourcePropertyListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeTagUsingPOST */
    private com.squareup.okhttp.Call removeTagUsingPOSTCall(Long resourceId, ResourceTagListDTO resourceTagListDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resourceTagListDTO;
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling removeTagUsingPOST(Async)");
        }
        
        // verify the required parameter 'resourceTagListDTO' is set
        if (resourceTagListDTO == null) {
            throw new ApiException("Missing the required parameter 'resourceTagListDTO' when calling removeTagUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/{resourceId}/tag/remove".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * removeTag
     * 
     * @param resourceId resourceId (required)
     * @param resourceTagListDTO resourceTagListDTO (required)
     * @return ResourceTagListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceTagListDTO removeTagUsingPOST(Long resourceId, ResourceTagListDTO resourceTagListDTO) throws ApiException {
        ApiResponse<ResourceTagListDTO> resp = removeTagUsingPOSTWithHttpInfo(resourceId, resourceTagListDTO);
        return resp.getData();
    }

    /**
     * removeTag
     * 
     * @param resourceId resourceId (required)
     * @param resourceTagListDTO resourceTagListDTO (required)
     * @return ApiResponse&lt;ResourceTagListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceTagListDTO> removeTagUsingPOSTWithHttpInfo(Long resourceId, ResourceTagListDTO resourceTagListDTO) throws ApiException {
        com.squareup.okhttp.Call call = removeTagUsingPOSTCall(resourceId, resourceTagListDTO, null, null);
        Type localVarReturnType = new TypeToken<ResourceTagListDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * removeTag (asynchronously)
     * 
     * @param resourceId resourceId (required)
     * @param resourceTagListDTO resourceTagListDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTagUsingPOSTAsync(Long resourceId, ResourceTagListDTO resourceTagListDTO, final ApiCallback<ResourceTagListDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTagUsingPOSTCall(resourceId, resourceTagListDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceTagListDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
