/*
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: 1.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import com.google.gson.reflect.TypeToken;
import io.swagger.client.*;
import io.swagger.client.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataapicontrollerApi {
    private ApiClient apiClient;

    public DataapicontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataapicontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getLatestSummaryUsingGET */
    private com.squareup.okhttp.Call getLatestSummaryUsingGETCall(Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getLatestSummaryUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/{resourceId}/summary".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getLatestSummary
     * 
     * @param resourceId resourceId (required)
     * @return SummaryDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SummaryDTO getLatestSummaryUsingGET(Long resourceId) throws ApiException {
        ApiResponse<SummaryDTO> resp = getLatestSummaryUsingGETWithHttpInfo(resourceId);
        return resp.getData();
    }

    /**
     * getLatestSummary
     * 
     * @param resourceId resourceId (required)
     * @return ApiResponse&lt;SummaryDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SummaryDTO> getLatestSummaryUsingGETWithHttpInfo(Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = getLatestSummaryUsingGETCall(resourceId, null, null);
        Type localVarReturnType = new TypeToken<SummaryDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getLatestSummary (asynchronously)
     * 
     * @param resourceId resourceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLatestSummaryUsingGETAsync(Long resourceId, final ApiCallback<SummaryDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLatestSummaryUsingGETCall(resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SummaryDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getLatestValuesUsingGET */
    private com.squareup.okhttp.Call getLatestValuesUsingGETCall(Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getLatestValuesUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/{resourceId}/latest".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getLatestValues
     * 
     * @param resourceId resourceId (required)
     * @return LatestDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LatestDTO getLatestValuesUsingGET(Long resourceId) throws ApiException {
        ApiResponse<LatestDTO> resp = getLatestValuesUsingGETWithHttpInfo(resourceId);
        return resp.getData();
    }

    /**
     * getLatestValues
     * 
     * @param resourceId resourceId (required)
     * @return ApiResponse&lt;LatestDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LatestDTO> getLatestValuesUsingGETWithHttpInfo(Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = getLatestValuesUsingGETCall(resourceId, null, null);
        Type localVarReturnType = new TypeToken<LatestDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getLatestValues (asynchronously)
     * 
     * @param resourceId resourceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLatestValuesUsingGETAsync(Long resourceId, final ApiCallback<LatestDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLatestValuesUsingGETCall(resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LatestDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for queryLatestResourcesDataUsingPOST */
    private com.squareup.okhttp.Call queryLatestResourcesDataUsingPOSTCall(QueryLatestResourceDataDTO queryLatestResourceDataDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = queryLatestResourceDataDTO;
        
        // verify the required parameter 'queryLatestResourceDataDTO' is set
        if (queryLatestResourceDataDTO == null) {
            throw new ApiException("Missing the required parameter 'queryLatestResourceDataDTO' when calling queryLatestResourcesDataUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/query/latest".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * queryLatestResourcesData
     * 
     * @param queryLatestResourceDataDTO queryLatestResourceDataDTO (required)
     * @return QueryLatestResourceDataResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueryLatestResourceDataResultDTO queryLatestResourcesDataUsingPOST(QueryLatestResourceDataDTO queryLatestResourceDataDTO) throws ApiException {
        ApiResponse<QueryLatestResourceDataResultDTO> resp = queryLatestResourcesDataUsingPOSTWithHttpInfo(queryLatestResourceDataDTO);
        return resp.getData();
    }

    /**
     * queryLatestResourcesData
     * 
     * @param queryLatestResourceDataDTO queryLatestResourceDataDTO (required)
     * @return ApiResponse&lt;QueryLatestResourceDataResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueryLatestResourceDataResultDTO> queryLatestResourcesDataUsingPOSTWithHttpInfo(QueryLatestResourceDataDTO queryLatestResourceDataDTO) throws ApiException {
        com.squareup.okhttp.Call call = queryLatestResourcesDataUsingPOSTCall(queryLatestResourceDataDTO, null, null);
        Type localVarReturnType = new TypeToken<QueryLatestResourceDataResultDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * queryLatestResourcesData (asynchronously)
     * 
     * @param queryLatestResourceDataDTO queryLatestResourceDataDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryLatestResourcesDataUsingPOSTAsync(QueryLatestResourceDataDTO queryLatestResourceDataDTO, final ApiCallback<QueryLatestResourceDataResultDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryLatestResourcesDataUsingPOSTCall(queryLatestResourceDataDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueryLatestResourceDataResultDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for queryTimeRangeResourcesDataUsingPOST */
    private com.squareup.okhttp.Call queryTimeRangeResourcesDataUsingPOSTCall(QueryTimeRangeResourceDataDTO queryTimeRangeResourceDataDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = queryTimeRangeResourceDataDTO;
        
        // verify the required parameter 'queryTimeRangeResourceDataDTO' is set
        if (queryTimeRangeResourceDataDTO == null) {
            throw new ApiException("Missing the required parameter 'queryTimeRangeResourceDataDTO' when calling queryTimeRangeResourcesDataUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/resource/query/timerange".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * queryTimeRangeResourcesData
     * 
     * @param queryTimeRangeResourceDataDTO queryTimeRangeResourceDataDTO (required)
     * @return QueryTimeRangeResourceDataResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueryTimeRangeResourceDataResultDTO queryTimeRangeResourcesDataUsingPOST(QueryTimeRangeResourceDataDTO queryTimeRangeResourceDataDTO) throws ApiException {
        ApiResponse<QueryTimeRangeResourceDataResultDTO> resp = queryTimeRangeResourcesDataUsingPOSTWithHttpInfo(queryTimeRangeResourceDataDTO);
        return resp.getData();
    }

    /**
     * queryTimeRangeResourcesData
     * 
     * @param queryTimeRangeResourceDataDTO queryTimeRangeResourceDataDTO (required)
     * @return ApiResponse&lt;QueryTimeRangeResourceDataResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueryTimeRangeResourceDataResultDTO> queryTimeRangeResourcesDataUsingPOSTWithHttpInfo(QueryTimeRangeResourceDataDTO queryTimeRangeResourceDataDTO) throws ApiException {
        com.squareup.okhttp.Call call = queryTimeRangeResourcesDataUsingPOSTCall(queryTimeRangeResourceDataDTO, null, null);
        Type localVarReturnType = new TypeToken<QueryTimeRangeResourceDataResultDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * queryTimeRangeResourcesData (asynchronously)
     * 
     * @param queryTimeRangeResourceDataDTO queryTimeRangeResourceDataDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryTimeRangeResourcesDataUsingPOSTAsync(QueryTimeRangeResourceDataDTO queryTimeRangeResourceDataDTO, final ApiCallback<QueryTimeRangeResourceDataResultDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryTimeRangeResourcesDataUsingPOSTCall(queryTimeRangeResourceDataDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueryTimeRangeResourceDataResultDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
